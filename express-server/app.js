var createError = require('http-errors');
var express = require('express');
var path = require('path');
var ba64 = require('ba64')
var cors = require('cors')
let fs = require('fs');
const Jimp = require("jimp");

var app = express();

app.use(cors());

// view engine setup
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));
app.use(express.static(path.join(__dirname, 'public')));



app.post('/upload', async (req, res, next) => {
  // exclude name and message for the sake of demo
  // all other body items will be considered as a file
  const { name, message, ...files } = req.body;
  let photoID = 0;

  for (let key in files) {
    const base64 = files[key]

    // check if it's correctly formatted Base64 Data URI
    if (checkBase64(base64)) {
      // Write it to our root directory using input key as filename
      // eg. picture[1]
      if (key == null) {
        console.log("null");
        console.log(photoID);
        ba64.writeImageSync(photoID, base64)
      } else {
        console.log(key);
        ba64.writeImageSync(key, base64)
      }

    }
    photoID = photoID + 1;
  }

  res.send({ files })
})

app.post('/base64', async (req, res) => {

  const data =
    "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEAP////////////////////////////////////////////////////////////////////////////////////8B///////////////////////////////////////////////////////////////////////////////////////AABEIAMgBLAMBEQACEQEDEQH/xAGiAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgsQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+gEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoLEQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/ACqJCgAoAKACgAoAWgAoAKBBQAUAFABQAUAFABQAmaAEoGFABQAUgFoAWgQUAFABQAUAJQAUAFABQMKACgAoASgAoAKACgBaYBQAUAFABQAUALQAUAFAgoAKACgAoAKAEoGJQAUAJQAtAC0AFIBaBBQAUAFABQAUAJQAlAwoAKAFoAKAEoAKACgAoAKAFpgFABQAUAFAC0AFAgoAKACgAoAKACgBCaAE/wA/WgYlAwoAKBC0gFoAWgQUAFABQAlAwoAKAEoAKACgAoAKACgAoAKACgAoAKAFpgFABQAUALQAUAFAgoAKACgAoAKAEoASgYlAxKAFoAKBDqQC0CCgAoASgAoAKBhQAUAJQAUAJQAUDCgAoEFABQAUALQAUALTAKACgAoAWgAoAKBBQAUAFABQA2gYUDEoAKAEoAWkIWgBaBC0AJQAUDCmFhM0BYKACgAoAKACgBKACgYUAFIAoAKACgBaAEoAdTEFABQAUALQAUAFAgoAKACgBDQMbQMKACgBKAFoAWkIWgAoEFACUxiUAFABQAUAFAC0AFABQAlABQMKACkAUAFABQAUAFADqYgoAKAFoAKBBQAUAFABQAhoGNoGFABQAUAFAC0CFpALQISmAlAwoAKAEoGFABQAUAFABmgAoAKACgAoAKACgAoAKACkAtAC0xBQAUALQAUCCgAoAKACgBDQMbQMKAEoAWgAoAWgQtIAoEJTGFACUDCgAoAMUALigVwxQFxMUDCgBKACgAoAKAFoAKAEoAKAFpAFADqYgoAKAFoAKBBQAUAFABQAhoGNoGFABSAWgAoEFABTGFAhKBhQAUCHYoC4tIQUAFACUAFAxKAEpgJQMKACgAoAKACgYUhC0CFoAWmAUAFAC0AFAgoAKACgAoASgYlABQAUgFoAKACgBOtMBKACgYUAAoELmgLBmgAoASgAoAKBhQAUAJQAUAFABQAUAFAxaQhaBBQAtMAoAKAFoAKBBQAUAFABQAUAJSGJQAUALQAUCCgBD60xiUDCgAoAKACgAoAKACgAoAKBBQAUDCgBKACgAoGFABQIWkAtAgoAWmAUAFAC0AFAgoAKACgAoAKACkAlABQMKACgQUDDrTATFACUDCgBaBBQAUAGKACgAoAKACgAoAKAEoGFACUALQAUALSEFABQAtMAoAKAFoAKBBQAUAFABQAUAFIBKBhQAUAJTAKACgAoAKACgAoAKAFxQIOlADaBjhQDCkIKACmAUDEoAKAEoGFAC0hC0AFACUALTAKAFoAKACgQUAFABQAUAFABSASgYUAFABTASgAoAKACgAoAKACgB1AhtAxKBjhQSxaQgoGJTAKBiUAFABQAUAFIBaACgAoAKYBQAUAFAC0CCgAoAKACgAoAKQBQAlACUDFoASgBKYBQAtABQAUAAoAdSJExQUJimFxwoEFIQUAFMYlAxKACgANAAKACkAtABQIKACmMKACgBaACgQUAFABQAUAFABSAKAEoAKBhQAUAJTAKACgAoAKACgB1IkKACgBaAEoAKACmMSgYlABQAGgAoAWkAUAFAgoAKYwoAKAFoAKBBQAUAFABQAUAFIAoASgdwxQFxKACgApgFABQAtACUAAoBjqQgoELQAUAJTASgYlAwoAKACgBKQxaBC0CCgAoAKACmMKACgBaACgQUAFABQAUAFABSAKACgBKACgYUAJTAKAFoAKAEoBCUAPpCCgQtACUAFMYlAxKACgAoAKACkAtAgoAWgAoASgApjCgAoAKAFoEFABQAUAFABQAUgCgBKACgBaAEoGFACUALTEFACUDCgBaBC5oAKAEoAKACgBKBhQAUgCgBaBBQAUALQAUAFACUxhQAUALQAUCCgAoAKACgAoAKQBQAUAFABQAlAwoAKACmAUCDFABQAUAFABQAUAJQMKACgAoAKQC0AFAgoAWgAoAKACgBKYwoAKACgBaACgAoEFABQAUAFABQAtIBKAEoAWgAoAKAEpgGKAFpAFABTEJQMKBiUAFIBaAEoAKACgBaAFoEFABQAUAFABQAlMYUAFABQAtABQAUCCgAoAKACgAoAKQBQAlAC0AFABQAUwCgApAGKAEphYM0DsHNACUALSAKACgAoAKBC0AFABQAUAFABQAUAJTGFABQAUALQAUAFAgoAKACgAoAKACkAUAFABQAUAFABQAUAFABQAUAJQAUAFABQAtACUDCgQtABQAUAFABQAUAFMAoASgYUAFABQAUALQAUCCgAoAKACgAoAKQBQAUAFABQAUAFABQAUAFABQAUAFABQAUAFACUDFoEFABQAUAFABQAUAFMAoASgYUAFABQAUALQAUAFABQIKACgAoAKQBQAUAFABQAUAFABQAUAFAC0CCgAoAKACgBKBhQAUAFABQAUAFABTAKACgAoA/wD/2Q==";
  const pic = "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";
    // Convert base64 to buffer => <Buffer ff d8 ff db 00 43 00 ...
  const buffer = Buffer.from(pic, "base64");
  Jimp.read(buffer, (err, res) => {
    if (err) throw new Error(err);
    res.write("resized.jpg");
  });

  res.send("connected");
})

function checkBase64(string) {
  const B64_REGEX = /^data:.*;base64,([0-9a-zA-Z+\/]{4})*(([0-9a-zA-Z+\/]{2}==)|([0-9a-zA-Z+\/]{3}=))?$/i

  return B64_REGEX.test(string)
}

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  next(createError(404));
});

// error handler
app.use(function (err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;